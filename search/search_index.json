{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Step\u2011by\u2011Step Flowchart App","text":"<p>Welcome to the documentation for the React\u00a0+\u00a0Supabase \u201cStep\u2011by\u2011Step\u201d Flowchart Manager.  </p> <p>This app allows two personas:</p> <ul> <li>Giver UI </li> <li>Create and manage workflows (flowcharts)  </li> <li>Define steps, dependencies, durations, responsibilities, statuses  </li> <li>Bulk\u2011edit, search, filter, sort and group processes &amp; steps  </li> <li>Diagram view (zoomable graphs) and tabular view  </li> <li> <p>Alerts, reminders &amp; custom triggers  </p> </li> <li> <p>Doer UI </p> </li> <li>View assigned steps in priority order  </li> <li>Fill form data, update status, add comments  </li> <li>Quick actions (forward, escalate, undo)  </li> <li>Shareable step URLs and SOPs/guidelines  </li> </ul> <p>Jump to: Getting Started \u2022 Architecture \u2022 Features</p>"},{"location":"#features","title":"Features","text":"<ol> <li>Workflows </li> <li>\u201cAdd new workflow\u201d button  </li> <li>Flowchart naming &amp; backlinking  </li> <li>Data\u2011capture forms (Google/Tally/Crafty)  </li> <li>List Controls </li> <li>Search box with \u201cfilters as you type\u201d  </li> <li>Time\u2011based filters: most urgent, delayed, last modified, latest assigned  </li> <li>Data\u2011point filters &amp; group\u2011by (foldable groups)  </li> <li>Diagram View </li> <li>Auto\u2011generated D2Lang graphs  </li> <li>Zoomable workflows &amp; subgraphs  </li> <li>Step Definition </li> <li>Add/Edit/Delete steps, reorder, parallel vs. sequential  </li> <li>Turn\u2011around time (TaT) with units (hrs/mins/days)  </li> <li>Multi\u2011select responsibilities (person/role/team)  </li> <li>Dependencies: single/multiple previous steps or form arrival  </li> <li>Status types (yes/no, approved/rejected, custom)  </li> <li>Alerts &amp; Reminders </li> <li>On\u2011time, late or threshold\u2011based alerts  </li> <li>Channels: email, in\u2011app, WhatsApp, push  </li> <li>Configurable triggers &amp; regular reminders  </li> <li>Actions &amp; Interactions </li> <li>Quick actions per data point: forward, escalate, message  </li> <li>Bulk\u2010mark done via swipe/tick  </li> <li>Undo last step (30\u00a0s window)  </li> <li>Doer Experience </li> <li>Prioritized step list with filters/sorts/groups  </li> <li>Transposed form view, SOP links, comments  </li> <li>Shareable step link with access controls  </li> </ol>"},{"location":"auth/","title":"Routing &amp; Authentication","text":"<ul> <li>Public <code>/login</code> \u2192 <code>AuthScreen</code> </li> <li>ProtectedRoute HOC wraps all other routes  </li> <li>Calls <code>supabase.auth.getSession()</code> </li> <li>Shows \u201cLoading...\u201d until session resolves  </li> <li>Redirects to <code>/login</code> if not authenticated  </li> <li>Nested Routes under <code>&lt;ProtectedRoute&gt;</code>:</li> <li><code>/</code> \u2192 <code>ProcessList</code></li> <li><code>/add-process</code> \u2192 <code>AddProcess</code></li> <li><code>/process/:id/steps</code> \u2192 <code>StepCreation</code></li> <li><code>/process/:id/add-step</code> \u2192 <code>AddStep</code></li> <li><code>/process/:id/bulk-edit</code> \u2192 <code>BulkAddFlowchart</code></li> <li><code>/doer</code> \u2192 <code>DoerStepList</code></li> <li><code>/doer/step/:stepId/submission/:submissionId</code> \u2192 <code>DoerStepDetail</code></li> <li><code>/sync</code> \u2192 <code>SyncResponses</code></li> </ul>"},{"location":"components/","title":"Reusable Components","text":""},{"location":"components/#navbar","title":"Navbar","text":"<ul> <li>Shows current user, logout, and links  </li> <li>Highlights active route</li> </ul>"},{"location":"components/#processcard-stepcard","title":"ProcessCard &amp; StepCard","text":"<ul> <li>Summary view of each process/step  </li> <li>Clickable to navigate into details</li> </ul>"},{"location":"components/#privateroute","title":"PrivateRoute","text":"<ul> <li>Guards routes based on session state</li> </ul>"},{"location":"components/#common-controls","title":"Common Controls","text":"<ul> <li>SearchInput, FilterDropdown, SortMenu, GroupByMenu</li> </ul>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#docsconfigurationmd","title":"<code>docs/configuration.md</code>","text":"<p>```markdown</p>"},{"location":"configuration/#configuration","title":"Configuration","text":""},{"location":"configuration/#env-file","title":"<code>.env</code> file","text":"<p>```ini REACT_APP_SUPABASE_URL= REACT_APP_SUPABASE_ANON_KEY="},{"location":"deployment/","title":"Deployment","text":""},{"location":"deployment/#frontend","title":"Frontend","text":"<p>```bash npm run build</p>"},{"location":"deployment/#deploy-build-to-netlify-vercel-etc","title":"Deploy <code>build/</code> to Netlify, Vercel, etc.","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js\u00a016+ &amp; npm or Yarn  </li> <li>Python\u00a03.7+ (for local docs preview)</li> </ul>"},{"location":"installation/#clone-install","title":"Clone &amp; Install","text":"<p>```bash git clone https://github.com/your\u2011org/step\u2011by\u2011step\u2011app.git cd step\u2011by\u2011step\u2011app npm install</p>"},{"location":"installation/#or","title":"or","text":"<p>yarn install</p>"},{"location":"serverless-functions/","title":"Netlify Serverless: <code>syncResponses</code>","text":"<p>Location: <code>netlify/functions/server/index.js</code></p> <ul> <li>Exposes a webhook to pull Google Form responses</li> <li>Uses Supabase Admin key (stored as Netlify env var)</li> <li>Inserts/submits into Supabase <code>responses</code> table</li> </ul>"},{"location":"structure/","title":"Project Structure","text":""},{"location":"structure/#docsstructuremd","title":"<code>docs/structure.md</code>","text":"<p>```markdown</p>"},{"location":"structure/#project-structure","title":"Project Structure","text":""},{"location":"types/","title":"Types &amp; Interfaces","text":"<p>```ts export interface Process {   id: number;   name: string;   created_at: string;   \u2026 }</p> <p>export interface Step {   id: number;   process_id: number;   name: string;   Tat: number; // planned duration   status: string;   dependencies: number[];   responsibilities: { person?: string; role?: string; team?: string }[];   \u2026 }</p> <p>export interface Submission {   id: number;   step_id: number;   data: Record;   status: string;   comments?: string;   \u2026 }"},{"location":"pages/AddProcess/","title":"AddProcess","text":"<p>File: <code>src/pages/AddProcess.tsx</code></p>"},{"location":"pages/AddProcess/#purpose","title":"Purpose","text":"<p>Allows the Giver to create a new workflow by providing a name and optional backlink.</p>"},{"location":"pages/AddProcess/#key-features","title":"Key Features","text":"<ul> <li>\u201cAdd new workflow\u201d button &amp; form  </li> <li>Validation for flowchart name  </li> <li>Saves to <code>processes</code> table in Supabase  </li> </ul>"},{"location":"pages/AddProcess/#hooks-api-calls","title":"Hooks &amp; API Calls","text":"<ul> <li><code>useState</code> for form fields  </li> <li><code>supabase.from('processes').insert({ name, backlink })</code></li> </ul>"},{"location":"pages/AddStep/","title":"AddStep","text":""},{"location":"pages/AddStep/#docspagesaddstepmd","title":"<code>docs/pages/AddStep.md</code>","text":"<p>```markdown</p>"},{"location":"pages/AddStep/#addstep","title":"AddStep","text":"<p>File: <code>src/pages/AddStep.tsx</code></p>"},{"location":"pages/AddStep/#purpose","title":"Purpose","text":"<p>Define a new step within an existing workflow.</p>"},{"location":"pages/AddStep/#features","title":"Features","text":"<ul> <li>Add before/after existing steps  </li> <li>Set Step Name, TaT (hrs/mins/days/immediate)  </li> <li>Multi\u2011select Responsibilities (person, role, team)  </li> <li>Choose Dependencies (previous step(s))  </li> <li>Initial Status selection  </li> </ul>"},{"location":"pages/AddStep/#hooks-api-calls","title":"Hooks &amp; API Calls","text":"<p>```ts const [step, setStep] = useState({...}); supabase.from('steps').insert({ ...step, process_id });"},{"location":"pages/AuthScreen/","title":"AuthScreen","text":""},{"location":"pages/AuthScreen/#docspagesauthscreenmd","title":"<code>docs/pages/AuthScreen.md</code>","text":"<p>```markdown</p>"},{"location":"pages/AuthScreen/#authscreen","title":"AuthScreen","text":"<p>File: <code>src/pages/AuthScreen.tsx</code></p>"},{"location":"pages/AuthScreen/#purpose","title":"Purpose","text":"<p>Handle user sign\u2011in &amp; sign\u2011up via Supabase Auth.</p>"},{"location":"pages/AuthScreen/#features","title":"Features","text":"<ul> <li>Email &amp; password fields  </li> <li>\u201cLogin\u201d and \u201cRegister\u201d modes  </li> <li>Redirects to <code>/</code> if already authenticated  </li> </ul>"},{"location":"pages/AuthScreen/#hooks-api-calls","title":"Hooks &amp; API Calls","text":"<p>```ts supabase.auth.signInWithPassword({ email, password }); supabase.auth.signUp({ email, password });</p>"},{"location":"pages/BulkEditSteps/","title":"BulkEditSteps","text":""},{"location":"pages/BulkEditSteps/#docspagesbulkeditstepsmd","title":"<code>docs/pages/BulkEditSteps.md</code>","text":"<p>```markdown</p>"},{"location":"pages/BulkEditSteps/#bulkeditsteps","title":"BulkEditSteps","text":"<p>File: <code>src/pages/BulkEditSteps.tsx</code></p>"},{"location":"pages/BulkEditSteps/#purpose","title":"Purpose","text":"<p>Apply the same value to many steps at once.</p>"},{"location":"pages/BulkEditSteps/#features","title":"Features","text":"<ul> <li>Displays sliders for each step based on date range difference  </li> <li>If sliders &gt;\u00a010, shows only one UI slider but writes the same value to all  </li> <li>Batch update via single API call  </li> </ul>"},{"location":"pages/BulkEditSteps/#hooks-api-calls","title":"Hooks &amp; API Calls","text":"<p>```ts const updates = steps.map(s =&gt; ({ id: s.id, tat: newTat })); supabase.from('steps').update(updates);</p>"},{"location":"pages/FillForm/","title":"FillForm","text":""},{"location":"pages/FillForm/#docspagesfillformmd","title":"<code>docs/pages/FillForm.md</code>","text":"<p>```markdown</p>"},{"location":"pages/FillForm/#fillform","title":"FillForm","text":"<p>File: <code>src/pages/FillForm.tsx</code></p>"},{"location":"pages/FillForm/#purpose","title":"Purpose","text":"<p>Capture arbitrary data for a workflow via embedded Google/Tally forms.</p>"},{"location":"pages/FillForm/#features","title":"Features","text":"<ul> <li>Iframe or embed of external form  </li> <li>\u201cSave\u201d button writes responses to Supabase  </li> <li>Future: switch to built\u2011in Crafty forms  </li> </ul>"},{"location":"pages/FillForm/#hooks-api-calls","title":"Hooks &amp; API Calls","text":"<p>```ts supabase.from('submissions').insert({ step_id, data });</p>"},{"location":"pages/FormBuilder/","title":"FormBuilder","text":""},{"location":"pages/FormBuilder/#docspagesformbuildermd","title":"<code>docs/pages/FormBuilder.md</code>","text":"<p>```markdown</p>"},{"location":"pages/FormBuilder/#formbuilder","title":"FormBuilder","text":"<p>File: <code>src/pages/FormBuilder.tsx</code></p>"},{"location":"pages/FormBuilder/#purpose","title":"Purpose","text":"<p>(Planned) Build custom \u201cCrafty\u201d forms in\u2011app.</p>"},{"location":"pages/FormBuilder/#features","title":"Features","text":"<ul> <li>Drag\u2011drop fields: text, number, date  </li> <li>Preview mode  </li> <li>Save JSON schema to Supabase  </li> </ul>"},{"location":"pages/FormBuilder/#hooks-api-calls","title":"Hooks &amp; API Calls","text":"<p>```ts supabase.from('forms').insert({ schema, name });</p>"},{"location":"pages/GrantOwnership/","title":"GrantOwnership","text":""},{"location":"pages/GrantOwnership/#docspagesgrantownershipmd","title":"<code>docs/pages/GrantOwnership.md</code>","text":"<p>```markdown</p>"},{"location":"pages/GrantOwnership/#grantownership","title":"GrantOwnership","text":"<p>File: <code>src/pages/GrantOwnership.tsx</code></p>"},{"location":"pages/GrantOwnership/#purpose","title":"Purpose","text":"<p>Map roles or teams to actual users.</p>"},{"location":"pages/GrantOwnership/#features","title":"Features","text":"<ul> <li>Choose Person, Role, Team from dropdowns  </li> <li>Multi\u2011select &amp; mapping sheet UI  </li> <li>Required for step ownership logic  </li> </ul>"},{"location":"pages/GrantOwnership/#hooks-api-calls","title":"Hooks &amp; API Calls","text":"<p>```ts supabase.from('ownerships').upsert({ step_id, assignments });</p>"},{"location":"pages/ProcessList/","title":"ProcessList","text":""},{"location":"pages/ProcessList/#docspagesprocesslistmd","title":"<code>docs/pages/ProcessList.md</code>","text":"<p>```markdown</p>"},{"location":"pages/ProcessList/#processlist","title":"ProcessList","text":"<p>File: <code>src/pages/ProcessList.tsx</code></p>"},{"location":"pages/ProcessList/#purpose","title":"Purpose","text":"<p>Show list of all workflows (flowcharts).</p>"},{"location":"pages/ProcessList/#features","title":"Features","text":"<ul> <li>Search box with live filtering  </li> <li>Filter: time\u2011based (urgent, delayed, last modified, latest assigned)  </li> <li>Sort &amp; Group By controls (foldable groups)  </li> <li>Summary: number of steps &amp; data points per workflow  </li> <li>Long\u2011press or click for Edit &amp; Preview </li> </ul>"},{"location":"pages/ProcessList/#hooks-api-calls","title":"Hooks &amp; API Calls","text":"<p>```ts const { data: processes } = await supabase.from('processes').select('*');</p>"},{"location":"pages/StepCreation/","title":"StepCreation","text":""},{"location":"pages/StepCreation/#docspagesstepcreationmd","title":"<code>docs/pages/StepCreation.md</code>","text":"<p>```markdown</p>"},{"location":"pages/StepCreation/#stepcreation","title":"StepCreation","text":"<p>File: <code>src/pages/StepCreation.tsx</code></p>"},{"location":"pages/StepCreation/#purpose","title":"Purpose","text":"<p>List and manage steps for a given workflow.</p>"},{"location":"pages/StepCreation/#features","title":"Features","text":"<ul> <li>Sequential list of steps (cards)  </li> <li>Add step before/after, delete, rename  </li> <li>Drag\u2011drop reorder or use buttons  </li> <li>Show parallel tasks side\u2011by\u2011side  </li> <li>Zoom out \u2192 diagram/grid view  </li> </ul>"},{"location":"pages/StepCreation/#hooks-api-calls","title":"Hooks &amp; API Calls","text":"<p>```ts const { data: steps } = supabase.from('steps').select('*').eq('process_id', id); supabase.from('steps').update(...).delete(...);</p>"},{"location":"pages/SyncResponses/","title":"SyncResponses","text":""},{"location":"pages/SyncResponses/#docspagessyncresponsesmd","title":"<code>docs/pages/SyncResponses.md</code>","text":"<p>```markdown</p>"},{"location":"pages/SyncResponses/#syncresponses","title":"SyncResponses","text":"<p>File: <code>src/pages/SyncResponses.tsx</code></p>"},{"location":"pages/SyncResponses/#purpose","title":"Purpose","text":"<p>Manually trigger the serverless function to sync external form data.</p>"},{"location":"pages/SyncResponses/#features","title":"Features","text":"<ul> <li>\u201cSync Now\u201d button with progress indicator  </li> <li>Shows last sync timestamp and number of records imported  </li> </ul>"},{"location":"pages/SyncResponses/#hooks-api-calls","title":"Hooks &amp; API Calls","text":"<p>```ts fetch('/.netlify/functions/server').then(res =&gt; res.json());</p>"},{"location":"pages/ViewGoogleForm/","title":"ViewGoogleForm","text":""},{"location":"pages/ViewGoogleForm/#docspagesviewgoogleformmd","title":"<code>docs/pages/ViewGoogleForm.md</code>","text":"<p>```markdown</p>"},{"location":"pages/ViewGoogleForm/#viewgoogleform","title":"ViewGoogleForm","text":"<p>File: <code>src/pages/ViewGoogleForm.tsx</code></p>"},{"location":"pages/ViewGoogleForm/#purpose","title":"Purpose","text":"<p>Preview the external Google/Tally form within the app.</p>"},{"location":"pages/ViewGoogleForm/#features","title":"Features","text":"<ul> <li>Iframe with adjustable height  </li> <li>Link to open in new tab  </li> <li>Instructions for Giver  </li> </ul>"},{"location":"pages/ViewGoogleForm/#hooks-api-calls","title":"Hooks &amp; API Calls","text":"<p>None (pure UI/iframe)</p>"},{"location":"pages/doer/DoerStepDetail/","title":"DoerStepDetail","text":""},{"location":"pages/doer/DoerStepDetail/#docspagesdoerdoerstepdetailmd","title":"<code>docs/pages/doer/DoerStepDetail.md</code>","text":"<p>```markdown</p>"},{"location":"pages/doer/DoerStepDetail/#doerstepdetail","title":"DoerStepDetail","text":"<p>File: <code>src/pages/doer/DoerStepDetail.tsx</code></p>"},{"location":"pages/doer/DoerStepDetail/#purpose","title":"Purpose","text":"<p>Detail view for a single step assigned to the Doer.</p>"},{"location":"pages/doer/DoerStepDetail/#features","title":"Features","text":"<ul> <li>Transposed form data view  </li> <li>Status update buttons &amp; quick actions  </li> <li>SOP/Guidelines link  </li> <li>Comments feed &amp; add\u2011comment input  </li> <li>\u201cShare link\u201d copies URL  </li> </ul>"},{"location":"pages/doer/DoerStepDetail/#hooks-api-calls","title":"Hooks &amp; API Calls","text":"<p>```ts supabase.from('submissions').update({ status, comments }).eq('id', submissionId);</p>"},{"location":"pages/doer/DoerStepList/","title":"DoerStepList","text":"<p>File: <code>src/pages/doer/DoerStepList.tsx</code></p>"},{"location":"pages/doer/DoerStepList/#purpose","title":"Purpose","text":"<p>Show all steps assigned to the Doer.</p>"},{"location":"pages/doer/DoerStepList/#features","title":"Features","text":"<ul> <li>Prioritized list (most urgent \u2192 delayed \u2192 latest)  </li> <li>Search, filter, sort &amp; group controls (same as Giver)  </li> <li>Bulk mark\u2011done via swipe or tick  </li> <li>Quick actions: forward, escalate, message  </li> </ul>"},{"location":"pages/doer/DoerStepList/#hooks-api-calls","title":"Hooks &amp; API Calls","text":"<p>```ts const { data: submissions } = supabase.from('submissions')   .select('*')   .eq('assigned_to', userId);</p>"},{"location":"pages/doer/DoerSubmissionDetail/","title":"DoerSubmissionDetail","text":""},{"location":"pages/doer/DoerSubmissionDetail/#docspagesdoerdoersubmissiondetailmd","title":"<code>docs/pages/doer/DoerSubmissionDetail.md</code>","text":"<p>```markdown</p>"},{"location":"pages/doer/DoerSubmissionDetail/#doersubmissiondetail","title":"DoerSubmissionDetail","text":"<p>File: <code>src/pages/doer/DoerSubmissionDetail.tsx</code></p>"},{"location":"pages/doer/DoerSubmissionDetail/#purpose","title":"Purpose","text":"<p>View a single submission record in full.</p>"},{"location":"pages/doer/DoerSubmissionDetail/#features","title":"Features","text":"<ul> <li>All captured form fields in table  </li> <li>Timestamps: created, updated  </li> <li>History of status changes &amp; comments  </li> </ul>"},{"location":"pages/doer/DoerSubmissionDetail/#hooks-api-calls","title":"Hooks &amp; API Calls","text":"<p>```ts const { data: submission } = supabase.from('submissions').select('*').eq('id', id);</p>"}]}